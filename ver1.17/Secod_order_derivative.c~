#define Extended_ROWS 40
#define Extended_COLS 40

#include "foo.h"

/*First-order derivative matrix*/

long double First_order_der(long double Matrix_1[int dimR_1][int dimC_1], long double Matrix_2[dimR_2][dimC_2]){

   ReadCo60();
   for(i=0; i<count;i++)
     {
       if( xi[i] <= energy0 ){
	 F_prime[0][0][k] = 0;
	 F_prime[0][1][k] = 0;
	 F_prime[0][2][k] = 0;
	 F_primt[0][3][k] = 0;
	 F_prime[0][4][k] = 0;
	 F_prime[0][5][k]= 0;
	 F_prime[0][6][k] = 0;
	 F_prime[0][7][k] = 0;
	           F_prime[1][0][k] = 0;
	 F_prime[1][1][k] = 0;
	 F_prime[1][2][k] = 0;
	 F_primt[1][3][k] = 0;
	 F_prime[1][4][k] = 0;
	 F_prime[1][5][k]= 0;
	 F_prime[1][6][k] = 0;
	 F_prime[1][7][k] = 0;
	           F_prime[2][0][k] = 0;
	 F_prime[2][1][k] = 0;
	 F_prime[2][2][k] = 0;
	 F_primt[2][3][k] = 0;
	 F_prime[2][4][k] = 0;
	 F_prime[2][5][k]= 0;
	 F_prime[2][6][k] = 0;
	 F_prime[2][7][k] = 2*(xi[i]-energy0);
	         F_prime[3][0][k] = 0;
	 F_prime[3[1][k] = 0;
	 F_prime[3][2][k] = 0;
	 F_primt[3][3][k] = 0;
	 F_prime[3][4][k] = 0;
	 F_prime[3][5][k]= 0;
	 F_prime[3][6][k] = 0;
		 F_prime[3][7][k] = -2*(xi[i]-energy0); 
		 F_prime[4][0][k] = 0;
	 F_prime[4][1][k] = 0;
	 F_prime[4][2][k] = 0;
	 F_primt[4][3][k] = 0;
	 F_prime[4][4][k] = 0;
	 F_prime[4][5][k]= 0;
	 F_prime[4][6][k] = 0;
	 F_prime[4][7][k] = 0;
		  F_prime[5][0][k] = 0;
	 F_prime[5][1][k] = 0;
	 F_prime[5][2][k] = 0;
	 F_primt[5][3][k] = 0;
	 F_prime[5][4][k] = 0;
	 F_prime[5][5][k]= 0;
	 F_prime[5][6][k] = 0;
	 F_prime[5][7][k] = 0;
		 F_prime[7][0][k] = 0;
	 F_prime[6][1][k] = 0;
	 F_prime[6][2][k] = 0;
	 F_primt[6][3][k] = 0;
	 F_prime[6][4][k] = 0;
	 F_prime[6][5][k]= 0;
	 F_prime[6][6][k] = 0;
	 F_prime[6][7][k] = 0; 
		 F_prime[7][0][k] = 0;
	 F_prime[7][1][k] = 0;
	 F_prime[7][2][k] = 2*(xi[i]-energy0);
	 F_primt[7][3][k] = -2*(xi[i]-energy0);
	 F_prime[7][4][k] = 0;
	 F_prime[7][5][k]= 0;
	 F_prime[7][6][k] = 0;
	 F_prime[7][7][k] = -2*cbest+2*gamma;
	 
       }
   
       if( xi[i] <= energy0 ){
	 F_prime[i][0] = 0;
	 F_prime[i][1] = 0;
	 F_prime[i][2] = 0;
	 F_primt[i][3] = 0;
	 F_prime[i][4] = 0;
	 F_prime[i][5] = 0;
	 F_prime[i][6] = 0;
	 F_prime[i][7] = 0;
       }
       jasper=count+1;
     }
   ReadEu152();
   for(i=0; i<count;i++)
     {
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = (2*xi[i]*energy0-energy0*energy0);
	 F_primt[jasper+i][3] = (xi[i]-energy0)*(xi[i]-energy0);
	 F_prime[jasper+i][4] = 1;
	 F_prime[jasper+i][5] = 0;
	 F_prime[jasper+i][6] = 0;
	 F_prime[jasper+i][7] = cbest*(2*xi[i]-2*energy0)+gammabest*2*(xi[i] - energy0);
       }
   
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = xi[i]*xi[i];
	 F_primt[jasper+i][3] = 0;
	 F_prime[jasper+i][4] = 1;
	 F_prime[jasper+i][5] = 0;
	 F_prime[jasper+i][6] = 0;
	 F_prime[jasper+i][7] = 0;
       }
       jasper=count+1;
     }

   ReadBa133();
   for(i=0; i<count;i++)
     {
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = (2*xi[i]*energy0-energy0*energy0);
	 F_primt[jasper+i][3] = (xi[i]-energy0)*(xi[i]-energy0);
	 F_prime[jasper+i][4] = 0;
	 F_prime[jasper+i][5] = 1;
	 F_prime[jasper+i][6] = 0;
	 F_prime[jasper+i][7] = cbest*(2*xi[i]-2*energy0)+gammabest*2*(xi[i] - energy0);
       }
   
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = xi[i]*xi[i];
	 F_primt[jasper+i][3] = 0;
	 F_prime[jasper+i][4] = 0;
	 F_prime[jasper+i][5] = 1;
	 F_prime[jasper+i][6] = 0;
	 F_prime[jasper+i][7] = 0;
       }
       jasper=count+1;
     }
   
      ReadCo56();
   for(i=0; i<count;i++)
     {
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = (2*xi[i]*energy0-energy0*energy0);
	 F_primt[jasper+i][3] = (xi[i]-energy0)*(xi[i]-energy0);
	 F_prime[jasper+i][4] = 0;
	 F_prime[jasper+i][5] = 0;
	 F_prime[jasper+i][6] = 1;
	 F_prime[jasper+i][7] = cbest*(2*xi[i]-2*energy0)+gammabest*2*(xi[i] - energy0);
       }
   
       if( xi[i] <= energy0 ){
	 F_prime[jasper+i][0] = 1;
	 F_prime[jasper+i][1] = xi[i];
	 F_prime[jasper+i][2] = xi[i]*xi[i];
	 F_primt[jasper+i][3] = 0;
	 F_prime[jasper+i][4] = 0;
	 F_prime[jasper+i][5] = 0;
	 F_prime[jasper+i][6] = 1;
	 F_prime[jasper+i][7] = 0;
       }
       jasper=count+1;
     }
}
